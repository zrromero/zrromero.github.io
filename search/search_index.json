{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the repository of Zachary Romero, member of Team 305 for EGR314, currently working on an exciting project to design and develop a line-following robot.</p>","tags":["EGR 314","Team 305"]},{"location":"#team-members","title":"Team Members","text":"<ul> <li>Agilan Kumar</li> <li>Andrew Rushton</li> <li>David Diaz</li> <li>Zachary Romero</li> </ul>","tags":["EGR 314","Team 305"]},{"location":"#project-overview","title":"Project Overview","text":"<p>The line-following robot is designed to autonomously detect and follow a path using sensors and programmed logic. It\u2019s a collaborative effort, with each team member taking responsibility for a specific system.</p>","tags":["EGR 314","Team 305"]},{"location":"#my-role-motor-system-development","title":"My Role: Motor System Development","text":"<p>I am responsible for designing and implementing the motor system that powers the robot's movement via its wheels. This involves: - Selecting and controlling motors to ensure smooth and precise movements. - Integrating motor drivers and controllers to connect the motors to the microcontroller. - Developing code to handle motor speed and direction adjustments.</p>","tags":["EGR 314","Team 305"]},{"location":"#goals-and-challenges","title":"Goals and Challenges","text":"<p>Our primary goal is focussed towards the younger audience, where they will create a line. We will need to ensure that the robot can: - Accurately follow lines in various conditions. - Navigate corners and curves smoothly.</p> <p>Our secondary goal is focussed towards an older audience, where we will create the line and they need to navigate it. We will need to ensure the robot can: - Move only in one direction at a time - Move for a set amount of distance</p>","tags":["EGR 314","Team 305"]},{"location":"BOM/","title":"Bill of Materials (BOM)","text":"Part Name/Description Unit Quantity Unit Prototype Cost (USD) Total Prototype Cost (USD) Manufacturer Manufacturer Part Number Vendor Link Datasheet Link Supplier Supplier Part Number Amount Ordered # Received Surplus Schematic Reference Designator 4 Cell 18650 Series Battery Holder 1 $20.00 $20.00 Various N/A Digi-Key N/A Digi-Key N/A 2 TBD 1 CVin 4 18650 Batteries 1 $24.00 $24.00 PKCELL ICR18650-2600-F Digikey Datasheet Digikey ICR18650-2600-F 1 N/A Schottky Diode 1 $0.10 $0.10 Diodes Incorporated B260AE-13 Digi-Key Datasheet Digi-Key B260AE-13-FDICT-ND 3 TBD 2 DBlue, DGreen, DRed, DWhite Connector IN/OUT 2 $1.00 $2.00 TE Connectivity 350428-1 Digi-Key Datasheet Digi-Key A26228-ND 4 TBD 2 J? Capacitor (CVin) 1 $0.05 $0.05 Various N/A Digi-Key N/A Digi-Key N/A 6 TBD 5 CVin Capacitor (CVout) 1 $0.05 $0.05 Various N/A Digi-Key N/A Digi-Key N/A 6 TBD 5 CVout Light-Emitting Diode 4 $0.10 $0.40 Various N/A Digi-Key N/A Digi-Key N/A 9 TBD 5 DBlue, DGreen, DRed, DWhite Inductor 1 $0.50 $0.50 Various N/A Digi-Key N/A Digi-Key N/A 2 TBD 1 L? PIC18F26K22 Microcontroller 1 $4.00 $4.00 Microchip Technology PIC18F26K22-I/SP Digi-Key Datasheet Digi-Key PIC18F26K22-I/SP-ND 2 TBD 1 MCC* BTM9011EPXUMA1 Motor Driver 2 $3.00 $6.00 Infineon Technologies BTM9011EPXUMA1 Digi-Key Datasheet Digi-Key BTM9011EPXUMA1CT-ND 3 TBD 1 MD1, MD2 DRV8830DGQR Motor Driver 1 $2.50 $2.50 Texas Instruments DRV8830DGQR Digi-Key Datasheet Digi-Key 296-27750-1-ND 2 TBD 1 MD* DC Motor 2 $10.00 $20.00 Johnson Electric HC385G-302 Digi-Key Datasheet Digi-Key 403-1238-ND 3 TBD 1 MLeft, MRight Resistor (RB, RW) 2 $0.02 $0.04 Various N/A Digi-Key N/A Digi-Key N/A 7 TBD 5 RB, RW Resistor (RG, RR) 2 $0.02 $0.04 Various N/A Digi-Key N/A Digi-Key N/A 7 TBD 5 RG, RR MIC4680-3.3YM Buck Converter 1 $3.00 $3.00 Microchip Technology MIC4680-3.3YM Digi-Key Datasheet Digi-Key 576-1182-5-ND 2 TBD 1 U1 Fuse 3 $0.10 $0.30 Littelfuse Inc. 03131.25MXP Digi-Key Datasheet Digi-Key F3155-ND 7 TBD 4 XLeft, XPIC, XRight"},{"location":"BlockDiagram/","title":"Block Diagram","text":""},{"location":"BlockDiagram/#description","title":"Description","text":"<p>This block diagram illustrates a system built around a PIC microcontroller, which is one of the key requirements for the final design. The microcontroller communicates with other systems via an 8-pin header using UART protocol. Four debug LEDs are included to indicate system changes or display error codes when incorrect or no messages are received. The system is powered by a 9V source, which is stepped down to 3.3V using a switching regulator to supply the microcontroller and motor driver logic. The rest of the system continues to operate at 9V. The motor drivers communicate with the PIC microcontroller via SPI, enabling reliable 3.3V logic-level communication while still being powered by 9V to adequately drive the motors.</p>"},{"location":"BlockDiagram/#updated-changes","title":"Updated Changes","text":"<p>The main update to the block diagram is the inclusion of an external motor driver. This driver operates using PWM signals, which simplifies the code required to control the motors. It was chosen to facilitate the development of a working prototype, demonstrating that the rest of the system was correctly programmed. As a result, the motors respond appropriately when a movement command is received.</p>"},{"location":"ComponentSelection/","title":"Component Selection","text":""},{"location":"ComponentSelection/#major-components","title":"Major Components","text":"<p>For the motor drive subsystem, the main components will be the motors and the motor driver. We also need to think about the system's power source as well as regulating that power so our components do not burn. This system will be using a PIC Microcontroller from Microchip to communicate with the motor driver through Serial Peripheral Interface(SPI) or Inter-Integrated Circuit(I2C).</p>"},{"location":"ComponentSelection/#brushed-dc-motor","title":"Brushed DC Motor","text":"<p>For the motors, I am using brushed DC motors since they are cheap and will be small enough for our robot to be nonintrusive. I needed to find a motor that would work off of the power coming from the battery pack, so I roughly estimated around 12VDC was the optimal solution through the power budget.</p> Selected Product Rationale for Optimal Solution SE18K1ETY   Price: $9.28  Digikey / Datasheet This motor can reliably operate from 3.3V to 15V depending on the system needed. It will provide enough torque to unsure the robot moves smoothly."},{"location":"ComponentSelection/#benchmarked-products","title":"Benchmarked Products","text":"Product Price Links Pros Cons SE18K1ETY  $9.28 Digikey / Datasheet - Compact Size  - High Efficiency  - Durable - Limited Torque  - Relatively Expensive  - Requires Proper Heat Dissipation HC385G-302  $7.01 Digikey / Datasheet - Versatile  - Reliable Performance  - Affordable - Size  - Lower Efficiency  - Not as Durable ROB-11696  $2.10 Digikey / Datasheet - Small and Lightweight  - Easy Integration  - Low Cost - Low Torque  - Not Highly Durable  - Limited Speed Range"},{"location":"ComponentSelection/#motor-driver","title":"Motor Driver","text":"<p>To find our motor driver, I needed a driver that either works in I2C format or SPI format. It also needs to be able to provide enough power for our motors to avoid running them below optimal efficiency.</p> Selected Product Rationale for Optimal Solution BTM9011EPXUMA1   Price: $1.95  Digikey / Datasheet The BTM9011EPXUMA1 motor driver is chosen for controlling a 2-motor system. It can efficiently drive the motors, accepting a wide range of power. It also connects through SPI interface allowing for easy connections between the microcontroller and motors."},{"location":"ComponentSelection/#benchmarked-products_1","title":"Benchmarked Products","text":"Product Price Links Pros Cons NCV7719DQAR2G  $5.99 Digikey / Datasheet - Versatile Voltage Range  - Integrated Protection Features  - Low Power Consumption - Requires External Heat Sink for High Loads  - Limited Current Handling  - Can Be Sensitive to Voltage Spikes DRV8830DGQR  $2.09 Digikey / Datasheet - Small Package Size  - Low Power Consumption  - Integrated Fault Protection - Limited Output Current  - Requires External Decoupling Capacitors  - May Overheat under High Loads NCV7708FDWR2G  $5.83 Digikey / Datasheet - High Efficiency  - Integrated Protection Features  - Robust for Motor Control Applications - Requires External Components for Full Operation  - Can be Sensitive to Temperature  - Limited to Specific Loads BTM9011EPXUMA1  $1.95 Digikey / Datasheet -SPI Connection  - Accepts Wide Voltage Range  - works with 2 motors -"},{"location":"ComponentSelection/#voltage-regulator","title":"Voltage Regulator","text":"<p>Finding the right voltage regulator was tricky since I needed to take some large input voltage, around 12V DC, and bring it down to 3.3V in an efficient manner. Not only did I have to supply that, but when calculating the voltage using my batteries, I would be supplying around 14.8V, which would burn my motor, causing me to find a second regulator that creates a stable voltage of 12V.</p> Selected Product Rationale for Optimal Solution MIC4680-3.3YM   Price: $2.96  Digikey / Datasheet The MIC4680-3-3YM voltage regulator is perfect for powering the logic components of your system from the 12V supply. It features low dropout voltage, meaning it will maintain stable 3.3V output even when the input voltage is slightly above 3.3V. This is crucial for your project, as it ensures that the microcontroller and other logic components get the consistent 3.3V they need to function, without worrying about inefficiencies or excessive heat that could arise from a less efficient regulator."},{"location":"ComponentSelection/#benchmarked-products_2","title":"Benchmarked Products","text":"Product Price Links Pros Cons LM2674MX-3.3/NOPB  $3.37 Digikey / Datasheet - High Efficiency  - Compact Size  - Reliable Voltage Regulation - Requires External Components for Full Operation  - Limited Output Current  - May Require Heat Sinking MIC4680-3.3YM  $2.96 Digikey / Datasheet - Low Dropout Voltage  - Wide Input Voltage Range  - Compact Design - Lower Output Current Rating  - May Require External Capacitors  - Performance Affected by Load Variation ADPL44002AUJZ-3.3-R7  $1.51 Digikey / Datasheet - High Precision  - Low Power Consumption  - Small Package - Limited Output Current  - May Need Additional Filtering  - Can Be Sensitive to Temperature Changes"},{"location":"ComponentSelection/#power-supply","title":"Power Supply","text":"<p>When choosing a power supply for this system, it's important to consider that the motors have the highest voltage requirements, meaning the battery may need to support not just this system but potentially others as well. I want something that isn't too bulky but still has enough power capacity to keep the project running efficiently. Given this, I decided to use 18650 lithium batteries, as they are relatively cheap due to being used in many products and have a great power storage capabilities seen through many hobbyist projects.</p> Selected Product Rationale for Optimal Solution 114090052   Price: $1.49  Digikey / Datasheet The 114090052 battery holder is the best choice because it is the cheapest option at only $1.49 while still meeting our voltage requirements when wired in series. Its compact and lightweight design helps keep our project from becoming too bulky, making it more practical. Additionally, it allows for easy battery replacement, avoiding the need for complex charging circuits like those required for lithium battery packs."},{"location":"ComponentSelection/#benchmarked-products_3","title":"Benchmarked Products","text":"Product Price Links Pros Cons BK-18650-PC8  $6.06 Digikey / Datasheet - Reliable holder  - Supports 18650 cells   - Durable design - Requires separate cells  - Bulkier than others  - Higher cost 114090052  $1.49 Digikey / Datasheet - Compact design  - Lightweight  -Accepts 18650 cells - Lower capacity  - May need replacements  - Less durable L148A26-4-3-3WA3  $33.44 Digikey / Datasheet - High capacity  - Pre-assembled pack  - Long-lasting - Most expensive  - Bulky design  - Overkill for project"},{"location":"ComponentSelection/#microcontroller","title":"Microcontroller","text":"<p>Since this subsystem will be using a PIC, the following table has been filled out to decide if the researched product can be used in the project.</p> ESP Info Answer Model PIC18F26K22 Product Page URL Product Datasheet URL(s) Microchip Application Notes URL(s) Documetation Vendor link Purchase Code Examples Documentation External Resources URL(s) Application Notes Unit cost $2.51 Absolute Maximum Current for entire IC 25 mA Supply Voltage Range 1.8V and 5.5V Absolute Maximum current  (for entire IC) 25mA Maximum GPIO current  (per pin) 25mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL MPLAB\u00ae SNAP Works with MPLabX? Yes Works with Microchip Code Configurator? Yes Module # Available Needed Associated Pins (or * for any) GPIO 28 8 GPIORA0, GPIORA1, GPIORA2, GPIORA3, GPIORA7, GPIORB0, GPIORC0, GPIORC2 ADC ? 0 N/A UART 2 1 RX1C7, TX1C6 SPI 2 2 SCK1, SDI1, SDO1, SCK2 SDI2,SDO2 I2C 2 2 N/A PWM ? 0 N/A ICSP 1 1 MCLR, PGC, PGD ... ... ... ..."},{"location":"ComponentSelection/#pic-test","title":"PIC Test","text":""},{"location":"ComponentSelection/#power-budget","title":"Power Budget","text":""},{"location":"ComponentSelection/#power-budget-table","title":"Power Budget Table","text":"Component Power Consumption Voltage Current (Amps) Power (W) Notes HC385G-302 Motor 1 12V DC Motor 12V 0.31A 3.72W Rated at 12V, 0.31A motor HC385G-302 Motor 2 12V DC Motor 12V 0.31A 3.72W Same as Motor 1 BTM9011EPXUMA1 Motor Driver 1 Motor Driver 12V (Motor) ~0.02A (standby) 0.24W Approximate power for low load; higher at full load BTM9011EPXUMA1 Motor Driver 2 Motor Driver 12V (Motor) ~0.02A (standby) 0.24W Approximate power for low load; higher at full load MIC4680-3.3YM Voltage Regulator Step-Down Regulator 14.8V (Input) 0.35A (for 3.3V load) 1.16W Power consumed based on 3.3V conversion PIC18LF26K22 Microcontroller MCU 3.3V 0.04A 0.13W Low current consumption (approx. 40mA) Total Power Consumption 9.49W"},{"location":"Motor%20API/","title":"Message Structures for PIC18LF26K22 Communication","text":"<p>Effective communication between the ESP32, PIC18LF26K22, and the BTM9011EPXUMA1 motor drivers requires well-structured message formats. These message structures ensure seamless data exchange for movement commands, motor control via SPI, and speed feedback to the HMI.</p>"},{"location":"Motor%20API/#movement-commands-from-esp32-to-pic18lf26k22","title":"Movement Commands from ESP32 to PIC18LF26K22","text":"<p>The first message structure involves movement commands from the ESP32 to the PIC18LF26K22. The message type byte determines movement commands. Direction values (0 for Stop, 1 for Left, 2 for Right, and 3 for Straight) are limited to four states for efficiency.</p> Byte Variable Name Data Type Min Value Max Value Example Value Description 1 Start uint8_t 0X41 0x41 N/A Message type identifier for movement 2 Sender uint8_t 0x03 0x03 N/A Adress for ZR 3 Receiver uint8_t 0x01 0x04 0x03 Who needs to receive message 4 Data uint8_t 0X00 0x03 1 0=Stop, 1=Left, 2=Right, 3=Straight 5 End uint8_t 0x42 0x42 N/A N/A"},{"location":"Motor%20API/#spi-communication-between-pic18lf26k22-and-btm9011epxuma1","title":"SPI Communication between PIC18LF26K22 and BTM9011EPXUMA1","text":"<p>The second message structure is tailored for SPI communication between the PIC18LF26K22 and the BTM9011EPXUMA1 motor driver. SPI requires a 16-bit command word that dictates the operation type. The motor ID byte indicates which motor is being controlled (left or right). The PWM value is a 16-bit number allowing precise speed adjustments, while status flags give quick feedback on motor states and error detection.</p> Byte Variable Name Data Type Min Value Max Value Example Value Description 1 command_word uint16_t 0x0000 0xFFFF 0x0A01 SPI command word including control bits 2 motor_id uint8_t 1 2 1 1 = Left Motor, 2 = Right Motor 3 pwm_value uint16_t 0 65535 50000 PWM value for motor speed (0-65535) 4 status_flags uint8_t 0 255 0x1F Status flags for feedback and error states"},{"location":"Motor%20API/#speed-feedback-from-pic18lf26k22-to-esp32","title":"Speed Feedback from PIC18LF26K22 to ESP32","text":"<p>The final message structure covers speed feedback from the PIC18LF26K22 to the ESP32. </p> Byte Variable Name Data Type Min Value Max Value Example Value Description 1 Start uint8_t 0X41 0x41 N/A Message type identifier for movement 2 Sender uint8_t 0x03 0x03 N/A Adress for ZR 3 Receiver uint8_t 0x01 0x04 0x03 Who needs to receive message 4 Data uint8_t 0X00 0x03 1 0=Stop, 1=Left, 2=Right, 3=Straight 5 End uint8_t 0x42 0x42 N/A N/A"},{"location":"schematic/","title":"Schematic &amp; PCB","text":"<p>Download ZIP</p>"},{"location":"schematic/#schematic-design","title":"Schematic Design","text":"<p>View PDF</p>"},{"location":"schematic/#pcb","title":"PCB","text":""},{"location":"schematic/#pcb-design","title":"PCB Design","text":""},{"location":"schematic/#final-pcb","title":"Final PCB","text":"<p>Download Gerber Files</p>"},{"location":"schematic/#schematic-functionality","title":"Schematic Functionality","text":"<ol> <li> <p>Main Control Using the PIC Microcontroller At the heart of the system is a PIC microcontroller, aligning with the specified requirement to use this microcontroller family for compatibility, availability, and existing development toolchains. The PIC handles all logic, coordination, and data processing tasks, enabling centralized control over system functions. This ensures consistent performance and simplifies firmware development and debugging.</p> </li> <li> <p>Inter-System Communication via UART Communication with external systems is handled through an 8-pin header utilizing UART protocol, which satisfies the product requirement for simple, low-overhead serial communication. UART is a robust and well-supported protocol ideal for short-distance, point-to-point communication, making it suitable for sending commands or status information between subsystems. This design choice ensures interoperability, expandability, and ease of integration in a broader system.</p> </li> <li> <p>Feedback and Diagnostic Capability with Debug LEDs User needs for maintainability and transparency are addressed through the inclusion of four debug LEDs. These serve as visual indicators for changes in system status or errors, allowing developers or operators to quickly identify issues without the need for external debugging tools. The LEDs support real-time feedback, helping diagnose issues like communication failures or malformed commands, which enhances reliability and user trust in the system.</p> </li> <li> <p>Dual Voltage Power Distribution Power distribution is thoughtfully designed to satisfy both efficiency and compatibility. A 9V primary power source is stepped down to 3.3V via a switching regulator, which powers the microcontroller and logic-level components like SPI interfaces. This fulfills the voltage and power efficiency requirements while ensuring compatibility with the 3.3V logic levels used by the PIC microcontroller. Meanwhile, keeping certain high-current components\u2014such as motors\u2014on the 9V rail ensures adequate power delivery without brownouts, supporting the system's mechanical performance requirements.</p> </li> <li> <p>High-Speed, Logic-Level Motor Control via SPI The motor drivers are connected to the PIC microcontroller through SPI, a high-speed synchronous interface. This choice supports efficient motor command delivery with minimal latency and reduced overhead compared to asynchronous protocols. SPI also ensures that 3.3V logic signals from the PIC are correctly interpreted by the motor drivers, even while they are powered by 9V for sufficient torque and speed output. This dual compatibility fulfills both electrical and functional requirements\u2014achieving fast, reliable motor control while ensuring proper logic-level interfacing.</p> </li> </ol>"},{"location":"schematic/#version-20","title":"Version 2.0","text":"<p>In developing a Version 2.0 of the hardware design, several key areas could be improved to enhance reliability, expandability, and ease of development. While the current schematic, featuring a PIC microcontroller, UART communication, SPI-controlled motor drivers, and a regulated 3.3V and 9V power supply, meets functional requirements, the development process revealed several opportunities for refinement.</p> <p>A major improvement would be allocating more time during the early stages to fully understand the interactions between subsystems, particularly communication protocols like SPI and UART. While datasheets provide essential guidance, they often don\u2019t reveal practical integration challenges, such as timing issues, voltage mismatches, or signal integrity problems. In Version 1.0, much of the system integration had to be handled simultaneously, which made debugging more complex and time consuming.</p> <p>To address this in Version 2.0, we would emphasize breadboard prototyping of each subsystem using the exact components from the final design. This hands-on approach would allow incremental testing and validation, especially of SPI communication between the PIC microcontroller and multiple peripheral devices. SPI, while fast and reliable, can introduce complexity when multiple devices share the same bus. Testing these interactions early on could lead to a more robust final design, including improvements such as additional chip select lines, better signal routing, or isolation components to reduce noise.</p> <p>The most important takeaway for future improvements is this: test, test, test. If more time had been given to prototype each subsystem individually, particularly the motor drivers in this project, there would have been a better opportunity to program them correctly, understand their behavior, and determine if they were the right solution in the first place. Testing not only builds confidence in the system but also reveals hidden issues that can\u2019t always be predicted through datasheets alone.</p> <p>Therefore, Version 2.0 should focus on early, thorough testing of each component and subsystem. This would result in a far more stable, functional, and reliable design.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}